AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Author: "Giorgio Carta"
Description: "ASG example with scheduling"
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  Subnets:
    Description: The ids of at least two subnets
    Type: List<AWS::EC2::Subnet::Id>
    # EDIT BELOW HERE
    Default: subnet-e35fe4ba,subnet-ca99f8bd
  VPC:
    Description: The id of the VPC
    Type: AWS::EC2::VPC::Id
    AllowedPattern: "^(vpc-)([a-z0-9]{8}|[a-z0-9]{17})$"
    # EDIT BELOW HERE
    Default: "vpc-bfbc30da"
Resources:
  DummyServerTemplate:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Description: "A template to generate EC2 instances for my fleet"
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      UserData:
        Fn::Base64:
          !Sub |
          #! /bin/bash
          sudo yum -y update
          sudo yum install httpd -y
          aws s3 cp s3://gcdataset/tokyo.zip .
          unzip tokyo.zip -d /var/www/html/
          service httpd start
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      MaxSize: 3
      MinSize: 1
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref DummyServerTemplate
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      AvailabilityZones:
        Fn::GetAZs:
          Ref: "AWS::Region"
      HealthCheckType: EC2
      MaxInstanceLifetime: 604800
  ASGScheduleOut:
    Type: AWS::AutoScaling::ScheduledAction
    Description: "From 8am scale out to 5 pods"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DesiredCapacity: 5
      MinSize: 2
      MaxSize: 5
      Recurrence: "0 8 * * *"
  ASGScheduleIn:
    Type: AWS::AutoScaling::ScheduledAction
    Description: "From 11am scale in to 3 pods"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DesiredCapacity: 3
      MinSize: 1
      MaxSize: 3
      Recurrence: "0 11 * * *"
  myTrafficPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageNetworkIn
        TargetValue: 200000
  EC2TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/index.html"
      HealthCheckPort: 80
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Name: "SAMPLE"
      Port: 80
      Protocol: HTTP
      TargetType: "instance"
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: "ipv4"
      Name: "SAMPLE-APP-LOAD-BALANCER"
      Scheme: "internet-facing"
      Subnets:
        !Ref Subnets
      Type: "application"







