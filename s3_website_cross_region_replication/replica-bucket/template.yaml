AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  replica-bucket

  Sample SAM Template for replica-bucket

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Description: "Allow Lambda full access to S3 - i.e. the permission to create buckets"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: Allow
                Resource: "arn:aws:logs:*:*:*"
              - Action:
                  - "s3:*"
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: root
  CreateReplicationBucketFunction:
    DependsOn: LambdaExecutionRole
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: create_bucket/
      Handler: app.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
  TriggerLambda:
    DependsOn: CreateReplicationBucketFunction
    Type: Custom::LambdaTrig
    Properties:
      ServiceToken: !GetAtt CreateReplicationBucketFunction.Arn
      DestBucketName: !Join
        - ''
        - - 'bucket-'
          - !Ref 'AWS::AccountId'
          - '-encr-replica'
      DestBucketRegion: "eu-central-1"
  S3ReplicaRole:
    Type: "AWS::IAM::Role"
    Description: Allows S3 bucket to write into another S3 bucket.
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Path: /
  EncryptedS3Bucket:
    DependsOn: TriggerLambda
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      ReplicationConfiguration:
        Role: !GetAtt S3ReplicaRole.Arn
        Rules:
          - Destination:
              Bucket: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - 'bucket-'
                  - !Ref 'AWS::AccountId'
                  - '-encr-replica'
              StorageClass: STANDARD
            Id: Rule1
            Prefix: ""
            Status: Enabled
      BucketName: !Join
        - ''
        - - 'bucket-'
          - !Ref 'AWS::AccountId'
          - '-encr'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        - Key: 'Name'
          Value: 'SecureBucket'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  #  HelloWorldApi:
  #    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
  #    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt CreateReplicationBucketFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "IAM Role created for Lambda function"
    Value: !GetAtt LambdaExecutionRole.Arn

